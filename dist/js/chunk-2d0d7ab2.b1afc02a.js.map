{"version":3,"sources":["webpack:///./src/pages/Login.tsx"],"names":["Login","loading","formData","email","password","errors","Object","keys","this","loggedinUser","length","$router","push","name","formSubmitted","hasError","errorMessage","event","preventDefault","resetErrorMessage","then","result","$nextTick","login","finally","computed","methods"],"mappings":"gUAoBqBA,EAArB,wDAUE,iDACE,eATM,EAAAC,SAAmB,EACnB,EAAAC,SAAmB,CACzBC,MAAO,GACPC,SAAU,IAQV,EAAKC,OAAS,CACZF,MAAO,GACPC,SAAU,IALd,EAVF,8CAmBE,WACME,OAAOC,KAAKC,KAAKC,cAAcC,OAAS,GAC1CF,KAAKG,QAAQC,KAAK,CAAEC,KAAM,gBArBhC,oBA4BE,WAAM,0BACJ,sBAAmB,6DAAnB,gBACa,6DADb,eAEc,0DAFd,6CAGgB,iBAHhB,cAGwC,IAHxC,OAGmD,OAHnD,0BAGoEL,KAAKM,gBAHzE,gBAIiB,oCAJjB,gCAMqB,iBANrB,MAM2C,WAN3C,oFAOme,EAAKZ,SAPxe,oCAOoB,gBAPpB,KAOyC,QAPzC,KAOsD,QAPtD,aAO2E,QAP3E,wBAO0c,iBAP1c,MAOmG,CAAE,8MAA8M,EAAM,kBAA+C,GAA5BM,KAAKH,OAAOF,MAAMO,OAAa,kDAAmDF,KAAKH,OAAOF,MAAMO,OAAS,GAPzb,gBAOme,EAAKR,SAASC,QAPjf,iCAOme,EAAKD,SAASC,MAPjf,oDAUqB,YAVrB,MAUsC,WAVtC,+EAWgf,EAAKD,SAXrf,uCAWoB,WAXpB,KAWoC,WAXpC,KAWoD,WAXpD,aAW4E,mBAX5E,wBAW4d,YAX5d,MAW+G,CAAE,8MAA8M,EAAM,kBAAkD,GAA/BM,KAAKH,OAAOD,SAASM,OAAa,kDAAmDF,KAAKH,OAAOD,SAASM,OAAS,GAX3c,gBAWgf,EAAKR,SAASE,WAX9f,iCAWgf,EAAKF,SAASE,SAX9f,+CAyBmB,UAzBnB,MAyBkC,6JAzBlC,CA0BSI,KAAKP,QAAL,eAA2B,4BAA3B,aAA6D,6BAA7D,KAA+F,OAA/F,QAA8G,YAA9G,OAAiI,iBAAjI,mCACsB,QADtB,kBAC8C,QAD9C,eACmE,IADnE,EACyE,mHAChE,KA5BlB,4BAiCGO,KAAKO,SAAL,yBAAoCP,KAAKQ,gBAAoB,SA9DpE,oFAyEE,WAAoBC,GAApB,mGACEA,EAAMC,iBACNV,KAAKW,oBAFP,SAIQ,eAASX,KAAKN,SAASC,MAAO,uBAAwB,CAAEU,KAAM,UACjEO,MAAK,SAAAC,GACJ,EAAKhB,OAAO,SAAWgB,EAAOhB,UANpC,uBASQ,eAASG,KAAKN,SAASE,SAAU,WAAY,CAAES,KAAM,aACxDO,MAAK,SAAAC,GACJ,EAAKhB,OAAO,YAAcgB,EAAOhB,UAXvC,OAcEG,KAAKc,WAAU,WACR,EAAKP,WACR,EAAKd,SAAU,EAEf,EAAKsB,MAAM,EAAKrB,UACbkB,MAAK,WACJ,EAAKT,QAAQC,KAAK,CAAEC,KAAM,iBAE3BW,SAAQ,WACP,EAAKvB,SAAU,SAvBzB,gDAzEF,+DAAmC,QAAdD,EAAK,gBAZzB,eAAU,CACTyB,SAAU,kBACL,eAAW,CACZhB,aAAc,0BAGlBiB,QAAS,kBACJ,eAAW,CACZH,MAAO,mBAIQvB,GAAA","file":"js/chunk-2d0d7ab2.b1afc02a.js","sourcesContent":["import SnackBar from '@/components/common/SnackBar'\r\nimport { iLogin, iUserDetail } from '@/interfaces/auth'\r\nimport FormComponent from '@/core/FormComponent'\r\nimport { validate } from 'vee-validate'\r\nimport { VNode } from 'vue'\r\nimport { Component } from 'vue-property-decorator'\r\nimport { mapActions, mapGetters } from 'vuex'\r\n\r\n@Component({\r\n  computed: {\r\n    ...mapGetters({\r\n      loggedinUser: 'root/getLoggedinUser'\r\n    })\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      login: 'root/login'\r\n    })\r\n  }\r\n})\r\nexport default class Login extends FormComponent {\r\n  private login!: (formData: iLogin) => Promise<boolean>\r\n  private loading: boolean = false\r\n  private formData: iLogin = {\r\n    email: '',\r\n    password: '',\r\n  }\r\n\r\n  private loggedinUser!: iUserDetail\r\n\r\n  constructor() {\r\n    super()\r\n\r\n    this.errors = {\r\n      email: [],\r\n      password: []\r\n    }\r\n  }\r\n\r\n  mounted() {\r\n    if (Object.keys(this.loggedinUser).length > 0)\r\n      this.$router.push({ name: 'dashboard' })\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns VNode\r\n   */\r\n  render(): VNode {\r\n    return (<div class=\"min-h-screen flex items-center justify-center bg-gray-800\">\r\n      <div class=\"bg-gray-900 p-5 pb-8 max-w-md w-full space-y-8 rounded-lg\">\r\n        <h1 class=\"mt-6 text-center text-3xl font-extrabold text-gray-500\">Sign in to your account</h1>\r\n        <form class=\"mt-8 space-y-6\" action=\"#\" method=\"POST\" onSubmit={this.formSubmitted} novalidate>\r\n          <div class=\"rounded-md shadow-sm -space-y-px\">\r\n            <div>\r\n              <label for=\"email-address\" class=\"sr-only\">Email address</label>\r\n              <input id=\"email-address\" name=\"email\" type=\"email\" autocomplete=\"email\" required class={{ 'appearance-none rounded-none relative block w-full px-3 py-2 border placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm': true, 'border-gray-300': this.errors.email.length == 0, 'border-red-300 placeholder-red-700 text-red-700': this.errors.email.length > 0 }} placeholder=\"Email address\" v-model={this.formData.email} />\r\n            </div>\r\n            <div>\r\n              <label for=\"password\" class=\"sr-only\">Password</label>\r\n              <input id=\"password\" name=\"password\" type=\"password\" autocomplete=\"current-password\" required class={{ 'appearance-none rounded-none relative block w-full px-3 py-2 border placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm': true, 'border-gray-300': this.errors.password.length == 0, 'border-red-300 placeholder-red-700 text-red-700': this.errors.password.length > 0 }} placeholder=\"Password\" v-model={this.formData.password} />\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div class=\"flex items-center justify-between\">\r\n            <div class=\"flex items-center\">\r\n              <input id=\"remember_me\" name=\"remember_me\" type=\"checkbox\" class=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\" v-model={this.formData.rememberMe} />\r\n              <label for=\"remember_me\" class=\"ml-2 block text-sm text-gray-400\">Remember me</label>\r\n            </div>\r\n            <div class=\"text-sm\">\r\n              <router-link to=\"#\" class=\"font-medium text-indigo-600 hover:text-indigo-500\">Forgot your password?</router-link>\r\n            </div>\r\n          </div> */}\r\n\r\n          <button type=\"submit\" class=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700\">\r\n            {this.loading ? (<svg class=\"h-5 w-5 mr-2 animate-spin\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n            </svg>) : null}\r\n            <span>Sign in</span>\r\n          </button>\r\n        </form>\r\n      </div>\r\n      {this.hasError ? (<SnackBar message={this.errorMessage} />) : null}\r\n    </div>)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param event \r\n   * HTML Form submit event\r\n   * \r\n   * @returns void\r\n   */\r\n  async formSubmitted(event: HTMLFormElement): Promise<void> {\r\n    event.preventDefault()\r\n    this.resetErrorMessage()\r\n\r\n    await validate(this.formData.email, 'required|email|min:4', { name: 'email' })\r\n      .then(result => {\r\n        this.errors['email'] = result.errors\r\n      })\r\n\r\n    await validate(this.formData.password, 'required', { name: 'password' })\r\n      .then(result => {\r\n        this.errors['password'] = result.errors\r\n      })\r\n\r\n    this.$nextTick(() => {\r\n      if (!this.hasError) {\r\n        this.loading = true\r\n\r\n        this.login(this.formData)\r\n          .then(() => {\r\n            this.$router.push({ name: 'dashboard' })\r\n          })\r\n          .finally(() => {\r\n            this.loading = false\r\n          })\r\n      }\r\n    })\r\n  }\r\n}\r\n"],"sourceRoot":""}